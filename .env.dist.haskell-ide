# This provider is the only one supported, do not change
# default : virtualbox
VAGRANT_DEFAULT_PROVIDER=virtualbox

# Extra vagrant plugins to install for this machine
# list : plugin names separated by spaces
# default :
VAGRANT_EXTRA_PLUGINS=

# hostname of the machine
# string : a valid hostname for the machine
# default : docker-box
MACHINE_HOSTNAME=docker-box

# Virtual cpu count
# range : from 1 to the logical CPU count on the host
# default : 1
MACHINE_CPU=4

# CPU execution cap.
# range : from 1 to 100
# default : 100
MACHINE_CPU_CAP=100

# Reserved RAM for the VM in megabytes
# range : from 512 to dependent of your host
# default : 1024
MACHINE_MEM=4096

# Forwarding rules allowing packet redirections from host to guest
# string : formatted this way: each rule separated by a semicolon, each element
#          of the rule separated by space.
#          rule;rule;rule
#          With a rule containing 3 properties, a host port, a guest port and
#          a protocol :
#          host_port1 guest_port1 protocol1;host_port2 guest_port2 protocol2;
#          Host and guest ports are valid port numbers between 0 and 65535,
#          protocol being either tcp or udp
# default :
# example : "8080 80 tcp;3307 3306 tcp"
MACHINE_FORWARDED_PORTS=

# Create a public network, aka a bridged network allowing another machine on the bridged
# network to communicate with this machine
# number : 1 connect this machine to a bridged network, making it reachable, 0
# do not create a public_network
# default : 0
# warning : in multi machine mode, this setting is not working properly due to
# a bug in Vagrant preventing machine to boot. As a workaround you can add the
# public network on the machine manually using hypervisor features.
MACHINE_CREATE_PUBLIC_NETWORK=0

# synchronized folders to map between the host and the VM.
# string : formatted this way: each synchronized folder definition are
#          separated by a semicolon, each element of the synchronized folder is
#          separated by a space.
#          sync_folder;sync_folder;sync_folder
#          With a sync_folder containing 2 properties: a source folder located on the
#          host and a target folder located on the VM :
#          ../test /test;../../meh /root/meh
# default :
# example : ../test /test;root /root
# important : for ssh folder, do not forget to add an entry in the KV_DB_ITEMS
#             variable specifying ssh_dir as key and the target folder (here
#             /home/docker/ssh).
MACHINE_SYNCED_FOLDERS='../ide /home/docker/ide;c:/Users/johndoe/.ssh/ /home/docker/ssh'

# configure the time zone region
# string : region name
# default : UTC
ZONEINFO_REGION=UTC

# configure the time zone city
# string : city name
# default :
ZONEINFO_CITY=

# configure the keymap
# string : the keymap name to use
# default : us
KEYMAP='us'

# configure the keymap variant
# string : the keymap variant name to use
# default : us
KEYMAP_VARIANT='us'

# configure the extra packages to install on the guest VM
# list : a list of package groups or names, separated by spaces
# default :
EXTRA_PACKAGES=

# extra arguments to append to a ssh command executed by the 'vagrant ssh'
# command.
# list : each arguments are separated by commas
# default :
SSH_COMMAND_EXTRA_ARGS="-t,exec /home/docker/ide/start-ide.sh"

# A key value store file that can be used as repository to store key-value
# pairs at provisioning stage. This file will be usable with gdbm utilities and
# can used after having provisioned the machine within a ssh session for
# instance.
# string : the absolute path of a file
# default :
# example : /var/db/kvstore.db
KV_DB_FILE=/home/docker/kvstore.db

# Indicates if a symbolic link to the key-value store file will be created
# within the /home/docker folder. It ensures you can always access the
# key-value store disregarding where the real file had been created.
# If there is already a filesystem item existing with the same name the link
# won't be created.
# If KV_DB_FILE is empty, no link will be created.
# number : either 1 or 0
# default : 1
KV_DB_FILE_CREATE_LINK=1

# The character to use as a separator for each item to store in the key-value
# store. An item is a key-value pair
# character : if more than one character are specified, only the first one will
# be used
# default : ' '
KV_ITEM_SEPARATOR=' '

# The assignment operator character to use indicating that a specific value is
# associated to a key.
# character : if more than one character are specified, only the first one will
# be used
# default : '='
KV_ASSIGNEMENT_OPERATOR='='

# Key-value pairs to store in the db file if set. Any pair is separated by the
# KV_ITEM_SEPARATOR character and each key is separated from each value by the
# KV_ASSIGNEMENT_OPERATOR character. Should any item be redefined more than
# once using the same key, the last defined item will take precedence,
# overwriting previously defined items.
# list : key-value pairs of the form
# <k>KV_ASSIGNEMENT_OPERATOR<v>KV_ITEM_SEPARATOR<k>KV_ASSIGNEMENT_OPERATOR<v>
# <k> being a key and <v> being a value
# default :
# example : let ' ' being KV_ITEM_SEPARATOR and '=' being
# KV_ASSIGNEMENT_OPERATOR and '/var/db/provision.db' being KV_DB_FILE :
# 'foo=bar hello=world question=whatever answer=42' will define 3 items in the
# key-value store db file '/var/db/provision.db'.
KV_DB_ITEMS="ssh_dir=/home/docker/ssh reset_stack_on_provision=false"

# configure the automatic extension of the docker volume.
# number : 1 to enable docker volume auto extension, 0 to disable docker volume
# extension
# default : 1
# note : when this feature is enabled, docker volume can be extended as soon as
# you add and/or resize a virtual disk in your vm using hypervisor facilities
DOCKER_VOLUME_AUTO_EXTEND=1

# Indicates if the multi machine mode is enabled. Multi machine mode allow
# several VM to be created and run from a single Vagrant project. Each machine
# will be provided the same amount of resource (cpu, cpu cap and memory) as
# specified in MACHINE_CPU, MACHINE_CPU_CAP and MACHINE_MEM variables by
# default. By default this mode is disabled as the value of this variable is
# defaulted to empty value. To enable the multi machine mode, at least 2 IP
# addresses must be specified, separated by a space character
# list : a set of IP address, separated by spaces
# default :
# note : an empty list means the multi machine mode is disabled. Specifying
# only 1 IP address means a normal machine setup
# warning : at least 2 IP address must be specified for a valid multi machine
# setup
MULTI_MACHINES=

# Prefix to be used when defining a vm in a multi machine setup. By default,
# vagrant assigns the 'default' name for a machine. DockerBox behaves slightly
# differently by default. If nothing is specified for a specific machine
# index, the value 'machine-N' will be used, with 'N' being the index of the
# machine. If you want another prefix, specify a name for each machine
# separated by a space without the number suffix that'll be automatically
# calculated.
# list : containing a name for each machine, that will be suffixed by an
# automatically incremented index
# default :
# example : for a 3 multi machine setup, having 'manager worker worker' will
# create vm named with 'manager-0', 'worker-0' and 'worker-1' in their
# identifier
MULTI_MACHINES_VM_PREFIX=

# Prefix to be used for each hostname in a multi machine setup. This variable
# supersedes MACHINE_HOSTNAME variable when defined. Each hostname is suffixed
# by '.N' where 'N' is the index of the machine in the multi machine setup. If
# a hostname is not specified for a given index for an existing machine, the
# MACHINE_HOSTNAME variable is used as prefix and an automatically computed
# numerical suffix is appended to it.
# list : containing a hostname for each machine, that will be suffixed by an
# automatically incremented index
# default :
# example : for a 3 multi machine setup, having 'manager worker worker' will
# create hostnamed machines with 'manager.0', 'worker.0' and 'worker.1'
MULTI_MACHINES_HOSTNAME_PREFIX=

# Allow heterogeneous resource allocation in a multi machine setup for virtual
# CPU count. By default, that is, when this variable is not set, each machine
# in a multi machine setup beneficiates of the same virtual cpu as specified in
# the MACHINE_CPU variable. When setup, this variable supersedes the
# MACHINE_CPU variable value and attributes a count of virtual cpu for the
# machine at specified index. If nothing is specified for a particular machine
# index, the MACHINE_CPU variable value is used.
# list : each element specifies a virtual cpu count for the machine at
# specified index.
# default :
# example : given a 3 multi machine setup, '6 4 2' will give 6 vcpu for the
# first machine, 4 for the second then 2 for the third.
MULTI_MACHINES_CPU=

# Allow heterogeneous resource allocation in a multi machine setup for virtual
# CPU cap. By default, that is, when this variable is not set, each machine in
# a multi machine setup beneficiates of the same virtual cpu as specified in
# the MACHINE_CPU_CAP variable. When setup, this variable supersedes the
# MACHINE_CPU_CAP variable value and attributes a percentage of virtual cpu
# power for the machine at specified index. If nothing is specified for a
# particular machine index, the MACHINE_CPU_CAP variable value is used.
# list : each element specifies a virtual cpu cap for the machine at
# specified index.
# default :
# example : given a 3 multi machine setup, '60 40 20' will give 60 vcpu power
# for the first machine, 40% for the second then 20% for the third.
MULTI_MACHINES_CPU_CAP=

# Allow heterogeneous resource allocation in a multi machine setup for memory.
# By default, that is, when this variable is not set, each machine in a multi
# machine setup beneficiates of the same amount of memory as specified in the
# MACHINE_MEM variable. When setup, this variable supersedes the MACHINE_MEM
# variable value and attributes an amount of memory for the machine at
# specified index. If nothing is specified for a particular machine index, the
# MACHINE_MEM variable value is used.
# list : each element specifies an amount of memory for the machine at
# specified index.
# default :
# example : given a 3 multi machine setup, '1024 2048 4096' will attribute 1GB
# for the first machine, 2GB for the second then 4GB for the third.
MULTI_MACHINES_MEM=

# Indicates if a machine of a multi machine mode have its own public network,
# aka bridged network, allowing other machines on the same network to
# communicate with them
# list : 1 to create a public network for the machine at a specified index, 0
# otherwise
# default :
# note : values in this variable supersedes value specified in the
# MACHINE_CREATE_PUBLIC_NETWORK variable.
# example : given a 3 multi machine configuration : "0 1 0" will enable a
# public network only for the second machine, not the first nor the last.
# public network will be created for each machine in the multi machine setup
# warning : currently unsupported. It looks like a bug in vagrant prevent this
# setting to work at all and prevent the multi machine setup to work.
MULTI_MACHINES_CREATE_PUBLIC_NETWORK=

# Indicates if a machine of a multi machine setup share same synced folders
# specified in the MACHINE_SYNCED_FOLDERS variable.
# list : 1 to share synced folder for the multi machine at the specified index
# specified in MACHINE_SYNCED_FOLDERS variable. 0 to not share any synced
# folder
# default :
# example : given a 3 multi machine configuration : "0 1 0" will enable a share
# of synced folder only for the second machine.
MULTI_MACHINES_SHARE_SYNCED_FOLDERS=
