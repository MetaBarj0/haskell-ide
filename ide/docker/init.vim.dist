exec 'source ' . stdpath('config') . '/plugins.vim'

if &t_Co > 2 || has("gui_running")
    syntax on
endif

" set termguicolors     " enable true colors support
colorscheme seoul256

" EDITOR CONFIGURATION
" Leader
let mapleader=","

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

" navigate through buffers
nmap <silent> <leader>bn :bn<CR>
nmap <silent> <leader>bp :bp<CR>

" Basic configuration
set hidden                                  " Hide buffers instead of closing them
set nowrap                                  " don''t wrap lines
set tabstop=2                               " a tab is four spaces
set backspace=indent,eol,start              " allow backspacing over everything in insert mode
set autoindent                              " always set autoindenting on
set copyindent                              " copy the previous indentation on autoindenting
set number                                  " always show line numbers
set relativenumber
set shiftwidth=2                            " number of spaces to use for autoindenting
set shiftround                              " use multiple of shiftwidth when indenting with '<' and '>'
set showmatch                               " set show matching parenthesis
set ignorecase                              " ignore case when searching
set smartcase                               " ignore case if search pattern is all lowercase,
                                            "    case-sensitive otherwise
set smarttab                                " insert tabs on the start of a line according to
                                            "    shiftwidth, not tabstop
set nohlsearch                              " don't highlight search terms
set incsearch                               " show search matches as you type
set history=1000                            " remember more commands and search history
set undolevels=1000                         " use many muchos levels of undo
set wildignore=*.swp,*.bak,*.pyc,*.class
set title                                   " change the terminal's title
set novisualbell                            " don't beep
set noerrorbells                            " don't beep
set nobackup
set noswapfile
set expandtab                               " always use spaces instead of tab characters
set softtabstop=4                           " set the number of columns for TAB

set cmdheight=2
set updatetime=300
set signcolumn=yes

" Enter paste mode when pasting a large amount of text
set pastetoggle=<F3>

" Disable arrow keys to navigate
" map <up> <nop>
" map <down> <nop>
" map <left> <nop>
" map <right> <nop>

" Easy window navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

"Easy buffer navigation
nnoremap gb :ls<CR>:b!<Space>

" Tags navigation mappings
map <silent> <leader>b :tjump <C-R><C-W><CR>
map <silent> <leader>B :pop<CR>

" Relative line number toggle
augroup ToggleRelativeNumber
    autocmd InsertEnter * :setlocal norelativenumber
    autocmd InsertLeave * :setlocal relativenumber
augroup END

" CoC
" Use tab for trigger completion with characters ahead and navigate.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup cocgroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
  autocmd BufWritePre *.hs call RecordCursorPos()
  function RecordCursorPos()
    let w:cursorLine = line('.')
    let w:cursorColumn = col('.')
  endfunction

  autocmd BufWritePost *.hs call FormatFile()
  function FormatFile()
    call CocAction('format')
    call cursor(w:cursorLine, w:cursorColumn)
  endfunction
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current line.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of LS, ex: coc-tsserver
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
" set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings using CoCList:
" Show all diagnostics.
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

" stylish-haskell
let g:stylishask_command = globpath(system('stack path --compiler-tools-bin')[:-2], 'stylish-haskell*')

" fugitive
map <silent> <leader>gs :Gstatus<CR>
map <silent> <leader>gc :Gcommit<CR>
map <silent> <leader>gd :Gdiff<CR>
map <silent> <leader>gp :Gpush<CR>
map <silent> <leader>gb :Gblame<CR>

" easymotion
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)
map  n <Plug>(easymotion-next)
map  N <Plug>(easymotion-prev)
let g:EasyMotion_smartcase = 1

" tabular
nmap <Leader>a= :Tabularize /=<CR>
vmap <Leader>a= :Tabularize /=<CR>
nmap <Leader>a: :Tabularize /:\zs<CR>
vmap <Leader>a: :Tabularize /:\zs<CR>
nmap <Leader>a<bar> :Tabularize /<bar><CR>
vmap <Leader>a<bar> :Tabularize /<bar><CR>

" gitgutter
nnoremap ]h <Plug>(GitGutterNextHunk)
nnoremap [h <Plug>(GitGutterPrevHunk)

let g:quickfix_timers = {}

function! ScrollToBottom(id)
  normal G
endfunction

function! AutoScroll()
  let id = timer_start(200, 'ScrollToBottom', {'repeat': -1})
  let g:quickfix_timers[bufnr('#')] = id
endfunction

function! StopAutoScroll()
    call timer_stop(g:quickfix_timers[bufnr('#')])
    unlet g:quickfix_timers[bufnr('#')]
endfunction

" vim-airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme='angr'

" Development
augroup CompileCode
  autocmd!
  autocmd FileType haskell nnoremap <silent> <F5> :call asyncrun#run('!', {'cwd': '<root>', 'save': 2}, 'stack build --fast --color never')<CR>
  autocmd FileType haskell nnoremap <silent> <C-F5> :call asyncrun#run('!', {'cwd': '<root>', 'silent': 1, 'hidden': 1}, 'stack exec '.substitute(getcwd(), '^.*[/\\]', '', '').'-exe')<CR>
  autocmd FileType haskell nnoremap <silent> <S-F5> :call asyncrun#run('!', {'cwd': '<root>', 'save': 2}, 'stack test --fast --color never')<CR>
  autocmd BufWinEnter *.hs silent! copen | :wincmd p | NERDTree | :wincmd p
  autocmd BufWinLeave *.hs cclose
  autocmd WinEnter * if &buftype == 'quickfix' | :call AutoScroll() | endif
  autocmd WinLeave * if &buftype == 'quickfix' | :call StopAutoScroll() | endif
augroup END

augroup HoogleCommands
  au BufNewFile,BufRead *.hs map <buffer> <F1> :Hoogle
  au BufNewFile,BufRead *.hs map <buffer> <C-F1> :HoogleClose<CR>
  au BufNewFile,BufRead *.hs map <buffer> <S-F1> :HoogleLine<CR>
augroup END

" Tagbar for Haskell
let g:tagbar_type_haskell = {
    \ 'ctagsbin'  : 'hasktags',
    \ 'ctagsargs' : '-x -c -o-',
    \ 'kinds'     : [
        \  'm:modules:0:1',
        \  'd:data: 0:1',
        \  'd_gadt: data gadt:0:1',
        \  't:type names:0:1',
        \  'nt:new types:0:1',
        \  'c:classes:0:1',
        \  'cons:constructors:1:1',
        \  'c_gadt:constructor gadt:1:1',
        \  'c_a:constructor accessors:1:1',
        \  'ft:function types:1:1',
        \  'fi:function implementations:0:1',
        \  'i:instance:0:1',
        \  'o:others:0:1'
    \ ],
    \ 'sro'        : '.',
    \ 'kind2scope' : {
        \ 'm' : 'module',
        \ 'c' : 'class',
        \ 'd' : 'data',
        \ 't' : 'type',
        \ 'i' : 'instance'
    \ },
    \ 'scope2kind' : {
        \ 'module'   : 'm',
        \ 'class'    : 'c',
        \ 'data'     : 'd',
        \ 'type'     : 't',
        \ 'instance' : 'i'
    \ }
\ }